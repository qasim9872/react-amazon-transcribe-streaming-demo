{"version":3,"sources":["utils/helpers.ts","components/ui-components/Heading.tsx","components/ui-components/helpers/Button.tsx","components/ui-components/helpers/TextBox.tsx","config/app.config.ts","utils/logger/index.ts","controllers/streams/EncodePcmStream.ts","controllers/transcribe.controller.ts","constants/transcribe.constants.ts","store/transcribe-config.tsx","hooks/use-transcribe-config.ts","components/ui-components/StreamingView.tsx","components/ui-components/helpers/FormInput.tsx","components/ui-components/index.ts","components/ui-components/DynamicTranscribeForm.tsx","components/app/builders/component-builder.tsx","components/app/layouts/Blank.tsx","components/app/layouts/index.ts","components/app/layouts/Dynamic.tsx","components/app/builders/layout-builder.tsx","components/app/wrappers/none.tsx","components/app/wrappers/box.tsx","components/app/wrappers/index.ts","components/app/wrappers/basic.tsx","components/app/builders/layout-wrapper.tsx","components/app/builders/index.tsx","constants/site.constants.ts","store/site-config.tsx","hooks/use-site-config.ts","store/index.tsx","App.tsx","utils/reportWebVitals.ts","index.tsx","controllers/streams/audio-helpers/encode-pcm.ts"],"names":["stream","a","exhausted","onData","Promise","resolve","once","chunk","destroy","streamAsyncIterator","Symbol","asyncIterator","fromReadable","Heading","text","className","Button","color","disabled","onClick","type","join","TextBox","name","placeholder","value","id","rows","readOnly","process","NODE_ENV","options","REACT_APP_NAME","level","REACT_APP_LOG_LEVEL","prettyPrint","pino","EncodePcmStream","encoding","callback","buffer","encodePcm","this","push","Transform","TranscribeController","audioStream","rawMediaStream","audioPayloadStream","transcribeConfig","client","started","accessKey","secretAccessKey","Error","logger","info","validateConfig","MicrophoneStream","window","navigator","mediaDevices","getUserMedia","video","audio","sampleRate","setStream","pipe","PassThrough","highWaterMark","config","region","credentials","accessKeyId","TranscribeStreamingClient","command","StartStreamTranscriptionCommand","LanguageCode","language","MediaEncoding","MediaSampleRateHertz","AudioStream","audioGenerator","bind","send","response","onStart","TranscriptResultStream","results","TranscriptEvent","Transcript","Results","length","result","final","IsPartial","alternatives","Alternatives","alternative","emit","stop","removeAllListeners","undefined","AudioEvent","AudioChunk","EventEmitter","transcribe","vocabularyName","TranscribeConfigContext","React","TranscribeConfigProvider","children","transcribeConfigHook","Provider","useTranscribeConfig","StreamingView","useState","recognizedTextArray","setRecognizedTextArray","recognizingText","setRecognizingText","setStarted","transcribeController","useMemo","useEffect","setConfig","display","prevTextArray","on","removeListener","init","catch","error","FormInput","context","onInputChange","formattedName","camelCase","htmlFor","onChange","components","DynamicTranscribeForm","fields","setTranscribeConfig","event","persist","target","map","field","buildComponent","details","key","MyComponent","componentName","getRandomColor","i","Math","floor","random","layouts","Blank","style","backgroundColor","Array","fill","Dynamic","component","index","builder","buildLayout","MyLayout","layoutName","None","Box","heading","horizontal","wrappers","Basic","header","title","direction","duration","wrapLayout","layout","MyLayoutWrapper","wrap","buildAndWrapLayout","wrapper","site","sections","SiteConfigContext","siteConfig","SiteConfigProvider","useSiteConfig","StoreProviders","props","Main","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","input","toRaw","offset","ArrayBuffer","view","DataView","s","max","min","setInt16","Buffer","from"],"mappings":"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","file":"static/js/main.2fa8f982.chunk.js","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { PassThrough } from 'stream';\n\nexport function mapRoute(text: string) {\n  return `${text}-section`;\n}\n\nexport async function* fromReadable(stream: PassThrough) {\n  let exhausted = false;\n  const onData = () =>\n    new Promise((resolve) => {\n      stream.once('data', (chunk: any) => {\n        resolve(chunk);\n      });\n    });\n\n  try {\n    while (true) {\n      const chunk = (await onData()) as any;\n      if (chunk === null) {\n        exhausted = true;\n        break;\n      }\n      yield chunk;\n    }\n  } finally {\n    if (!exhausted) {\n      stream.destroy();\n    }\n  }\n}\n\nexport function streamAsyncIterator(stream: PassThrough) {\n  // Get a lock on the stream:\n  //   const reader = stream.getReader();\n\n  return {\n    [Symbol.asyncIterator]() {\n      return fromReadable(stream);\n    },\n  };\n}\n","import React from 'react';\n\nconst Heading: React.FC<{\n  componentName: 'Heading';\n  text: string;\n}> = ({ text }) => {\n  return (\n    <h1 className=\"flex-grow flex py-8 rounded-full text-2xl font-bold justify-center\">\n      {text}\n    </h1>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\n\nconst Button: React.FC<{\n  text: string;\n  color: string;\n  disabled: boolean;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}> = ({ text, color, disabled, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      disabled={disabled}\n      onClick={onClick}\n      className={[\n        'transition duration-500 ease text-white  ',\n        'focus:outline-none focus:shadow-outline',\n        'border rounded-md px-4 py-2 m-2 select-none',\n        `${\n          disabled\n            ? 'bg-gray-300  border-gray-300 cursor-not-allowed'\n            : `border-${color}-500 bg-${color}-500 hover:bg-${color}-600`\n        }`,\n      ].join(' ')}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nconst TextBox: React.FC<{\n  name: string;\n  value: string;\n  placeholder?: string;\n}> = ({ name, placeholder, value }) => {\n  return (\n    <textarea\n      className=\"flex-grow flex mx-8 my-4 bg-gray-100 border-black border-2 text-sm\"\n      id={name}\n      name={name}\n      placeholder={placeholder}\n      rows={10}\n      value={value}\n      readOnly={true}\n    />\n  );\n};\n\nexport default TextBox;\n","export const { NODE_ENV, REACT_APP_NAME, REACT_APP_LOG_LEVEL } = process.env;\nexport const IS_PROD = NODE_ENV === 'production';\n\nexport const NAME = REACT_APP_NAME || 'React - Amazon Transcribe Demo!';\nexport const LOG_LEVEL = REACT_APP_LOG_LEVEL || 'info';\n","import pino from 'pino';\nimport { LOG_LEVEL, NAME, IS_PROD } from '../../config/app.config';\n\nconst options = {\n  name: NAME,\n  level: LOG_LEVEL,\n  prettyPrint: !IS_PROD,\n};\n\nexport default pino(options);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-underscore-dangle */\nimport { Transform, TransformCallback } from 'stream';\nimport { encodePcm } from './audio-helpers/encode-pcm';\n\nexport default class EncodePcmStream extends Transform {\n  _transform(chunk: any, encoding: string, callback: TransformCallback) {\n    const buffer = encodePcm(chunk);\n    this.push(buffer);\n    callback();\n  }\n}\n","import {\n  TranscribeStreamingClient,\n  StartStreamTranscriptionCommand,\n  StartStreamTranscriptionCommandOutput,\n} from '@aws-sdk/client-transcribe-streaming';\nimport MicrophoneStream from 'microphone-stream';\nimport { PassThrough } from 'stream';\nimport { EventEmitter } from 'events';\n\nimport transcribeConstants from '../constants/transcribe.constants';\nimport { streamAsyncIterator } from '../utils/helpers';\nimport logger from '../utils/logger';\nimport EncodePcmStream from './streams/EncodePcmStream';\n\nclass TranscribeController extends EventEmitter {\n  private audioStream: MicrophoneStream | null;\n\n  private rawMediaStream: MediaStream | null;\n\n  private audioPayloadStream: PassThrough | null;\n\n  private transcribeConfig?: typeof transcribeConstants;\n\n  private client?: TranscribeStreamingClient;\n\n  private started: boolean;\n\n  constructor() {\n    super();\n\n    this.audioStream = null;\n    this.rawMediaStream = null;\n    this.audioPayloadStream = null;\n    this.started = false;\n  }\n\n  hasConfig() {\n    return !!this.transcribeConfig;\n  }\n\n  setConfig(transcribeConfig: typeof transcribeConstants) {\n    this.transcribeConfig = transcribeConfig;\n  }\n\n  validateConfig() {\n    if (\n      !this.transcribeConfig?.accessKey ||\n      !this.transcribeConfig.secretAccessKey\n    ) {\n      throw new Error(\n        'missing required config: access key and secret access key are required',\n      );\n    }\n  }\n\n  async init() {\n    this.started = true;\n    if (!this.transcribeConfig) {\n      throw new Error('transcribe config is not set');\n    }\n\n    logger.info('transcribe config', this.transcribeConfig);\n    this.validateConfig();\n\n    // setting up microphone stream\n    logger.info('setting up microphone stream');\n    this.audioStream = new MicrophoneStream();\n\n    this.rawMediaStream = await window.navigator.mediaDevices.getUserMedia({\n      video: false,\n      audio: {\n        sampleRate: this.transcribeConfig.sampleRate,\n      },\n    });\n    await this.audioStream.setStream(this.rawMediaStream);\n\n    // create and pipe the streams\n    logger.info('setting up streams');\n    this.audioPayloadStream = this.audioStream\n      .pipe(new EncodePcmStream())\n      .pipe(new PassThrough({ highWaterMark: 1 * 1024 }));\n\n    // creating and setting up transcribe client\n    const config = {\n      region: this.transcribeConfig.region,\n      credentials: {\n        accessKeyId: this.transcribeConfig.accessKey,\n        secretAccessKey: this.transcribeConfig.secretAccessKey,\n      },\n    };\n    logger.info('setting up transcribe client with config', config);\n    this.client = new TranscribeStreamingClient(config);\n\n    const command = new StartStreamTranscriptionCommand({\n      // The language code for the input audio. Valid values are en-GB, en-US, es-US, fr-CA, and fr-FR\n      LanguageCode: this.transcribeConfig.language,\n      // The encoding used for the input audio. The only valid value is pcm.\n      MediaEncoding: 'pcm',\n      // The sample rate of the input audio in Hertz. We suggest that you use 8000 Hz for low-quality audio and 16000 Hz for\n      // high-quality audio. The sample rate must match the sample rate in the audio file.\n      MediaSampleRateHertz: this.transcribeConfig.sampleRate,\n      AudioStream: this.audioGenerator.bind(this)(),\n    });\n\n    const response = await this.client.send(command);\n    this.onStart(response);\n  }\n\n  async onStart(response: StartStreamTranscriptionCommandOutput) {\n    logger.info('recognition started', response);\n\n    if (response.TranscriptResultStream) {\n      for await (const event of response.TranscriptResultStream) {\n        // Get multiple possible results\n        const results = event.TranscriptEvent?.Transcript?.Results;\n        // Print all the possible transcripts\n        if (results && results.length > 0) {\n          const [result] = results;\n          const final = !result.IsPartial;\n          const alternatives = result.Alternatives;\n\n          if (alternatives && alternatives.length > 0) {\n            const [alternative] = alternatives;\n            const text = alternative.Transcript;\n\n            this.emit('recognized', { text, final });\n          }\n        }\n      }\n    }\n  }\n\n  async stop() {\n    this.started = false;\n\n    // request to stop recognition\n    this.audioStream?.stop();\n    this.audioStream = null;\n    this.rawMediaStream = null;\n\n    this.audioPayloadStream?.removeAllListeners();\n    this.audioPayloadStream?.destroy();\n    this.audioPayloadStream = null;\n\n    this.client?.destroy();\n    this.client = undefined;\n  }\n\n  async *audioGenerator() {\n    if (!this.audioPayloadStream) {\n      throw new Error('payload stream not created');\n    }\n\n    for await (const chunk of streamAsyncIterator(this.audioPayloadStream)) {\n      if (this.started) {\n        yield { AudioEvent: { AudioChunk: chunk } };\n      } else {\n        break;\n      }\n    }\n  }\n}\n\nexport default TranscribeController;\n","const transcribe = {\n  accessKey: '',\n  secretAccessKey: '',\n\n  // default config\n  language: 'en-US',\n  region: 'eu-west-1',\n  sampleRate: 44100,\n\n  vocabularyName: '',\n};\n\nexport default transcribe;\n","/* eslint-disable @typescript-eslint/indent */\nimport * as React from 'react';\nimport transcribeConfig from '../constants/transcribe.constants';\n\ntype TranscribeContext = [\n  typeof transcribeConfig,\n  React.Dispatch<React.SetStateAction<typeof transcribeConfig>> | (() => {}),\n];\n\nexport const TranscribeConfigContext = React.createContext<TranscribeContext>([\n  transcribeConfig,\n  () => {},\n]);\n\nconst TranscribeConfigProvider: React.FC<{}> = ({ children }) => {\n  const transcribeConfigHook = React.useState(transcribeConfig);\n\n  return (\n    <TranscribeConfigContext.Provider value={transcribeConfigHook}>\n      {children}\n    </TranscribeConfigContext.Provider>\n  );\n};\n\nexport default TranscribeConfigProvider;\n","import * as React from 'react';\n\nimport { TranscribeConfigContext } from '../store/transcribe-config';\n\nconst useTranscribeConfig = () => {\n  return React.useContext(TranscribeConfigContext);\n};\n\nexport default useTranscribeConfig;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport Button from './helpers/Button';\nimport TextBox from './helpers/TextBox';\n\nimport TranscribeController from '../../controllers/transcribe.controller';\nimport logger from '../../utils/logger';\nimport useTranscribeConfig from '../../hooks/use-transcribe-config';\n\nconst StreamingView: React.FC<{\n  componentName: 'StreamingView';\n}> = () => {\n  const [transcribeConfig] = useTranscribeConfig();\n  const [recognizedTextArray, setRecognizedTextArray] = useState<string[]>([]);\n  const [recognizingText, setRecognizingText] = useState<string>('');\n  const [started, setStarted] = useState(false);\n\n  const transcribeController = useMemo(() => new TranscribeController(), []);\n\n  useEffect(() => {\n    transcribeController.setConfig(transcribeConfig);\n\n    // if config is being updated, then stop the transcription\n    setStarted(false);\n  }, [transcribeConfig, transcribeController]);\n\n  useEffect(() => {\n    const display = ({ text, final }: { text: string; final: boolean }) => {\n      logger.info({ text, final });\n      if (final) {\n        setRecognizingText('');\n        setRecognizedTextArray((prevTextArray) => [...prevTextArray, text]);\n      } else {\n        setRecognizingText(text);\n      }\n    };\n\n    transcribeController.on('recognized', display);\n\n    return () => {\n      transcribeController.removeListener('recognized', display);\n    };\n  }, [transcribeController]);\n\n  useEffect(() => {\n    (async () => {\n      if (started) {\n        logger.info('attempting to start transcription');\n\n        // reset state\n        setRecognizedTextArray([]);\n        setRecognizingText('');\n\n        await transcribeController.init().catch((error: Error) => {\n          logger.error(error);\n          setStarted(false);\n        });\n      } else {\n        logger.info('stopping transcription');\n        await transcribeController.stop();\n      }\n    })();\n  }, [started, transcribeController]);\n\n  return (\n    <div className=\"flex-grow flex flex-col\">\n      <TextBox\n        name=\"streaming-result\"\n        placeholder=\"Your text will show up here\"\n        value={[...recognizedTextArray, recognizingText].join(' ')}\n      />\n\n      <div className=\"flex-grow flex flex-row justify-center\">\n        <Button\n          text=\"Start\"\n          color=\"green\"\n          disabled={started}\n          onClick={() => setStarted(true)}\n        />\n        <Button\n          text=\"Stop\"\n          color=\"red\"\n          disabled={!started}\n          onClick={() => setStarted(false)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default StreamingView;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport camelCase from 'camelcase';\n\ntype Fn = (\n  ...args: any[]\n) =>\n  | void\n  | (() => void)\n  | ((event: React.ChangeEvent<HTMLInputElement>) => void);\n\nconst FormInput: React.FC<{\n  name: string;\n  type: 'number' | 'text' | 'password';\n  context: { [key: string]: string | number };\n  onInputChange: Fn;\n}> = ({ name, context, onInputChange, type }) => {\n  const formattedName = camelCase(name);\n\n  return (\n    <div className=\"flex flex-col text-black items-start\">\n      <label className=\"capitalize font-bold\" htmlFor={formattedName}>\n        {name}\n      </label>\n\n      <input\n        id={formattedName}\n        type={type}\n        name={formattedName}\n        placeholder={name}\n        className=\"w-full mx-auto bg-gray-200 text-sm py-2 px-3 rounded mb-2 text-black border-black border-b-2\"\n        value={context[formattedName]}\n        onChange={onInputChange}\n      />\n    </div>\n  );\n};\n\nexport default FormInput;\n","import { ComponentProps } from 'react';\nimport Heading from './Heading';\nimport StreamingView from './StreamingView';\nimport DynamicTranscribeForm from './DynamicTranscribeForm';\n\nconst components = { Heading, StreamingView, DynamicTranscribeForm };\n\nexport default components;\n\n// types\n\nexport type ComponentName = keyof typeof components;\nexport type BaseComponent = { componentName: ComponentName };\nexport type Component = ComponentProps<\n  typeof components[keyof typeof components]\n>;\n\nexport type Components = Component[];\n","import React from 'react';\nimport FormInput from './helpers/FormInput';\nimport useTranscribeConfig from '../../hooks/use-transcribe-config';\n\nconst DynamicTranscribeForm: React.FC<{\n  componentName: 'DynamicTranscribeForm';\n  fields: string[];\n}> = ({ fields }) => {\n  const [transcribeConfig, setTranscribeConfig] = useTranscribeConfig();\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    if (typeof setTranscribeConfig === 'function') {\n      setTranscribeConfig({\n        ...transcribeConfig,\n        [event.target.name]: event.target.value,\n      });\n    }\n  };\n\n  return (\n    <form className=\"flex flex-col my-5 border-black border-2 text-center w-1/3 px-3 py-4 text-white mx-auto rounded\">\n      {fields.map((field) => (\n        <FormInput\n          key={field}\n          type=\"text\"\n          name={field}\n          context={transcribeConfig as { [key: string]: string | number }}\n          onInputChange={onChange}\n        />\n      ))}\n    </form>\n  );\n};\n\nexport default DynamicTranscribeForm;\n","import React from 'react';\nimport components, { BaseComponent } from '../../ui-components';\n\nexport function buildComponent(details: BaseComponent, key?: number | string) {\n  const MyComponent = components[details.componentName];\n  // using any to allow this to be dynamic\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return <MyComponent key={key} {...(details as any)} />;\n}\n\nexport default buildComponent;\n","import React from 'react';\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nconst Blank: React.FC<{\n  id: string;\n  layoutName: 'Blank';\n}> = (details) => {\n  return (\n    <div style={{ backgroundColor: getRandomColor() }}>\n      {' '}\n      {Array(500).fill(details.id).join(' ')}{' '}\n    </div>\n  );\n};\n\nexport default Blank;\n","import { ComponentProps } from 'react';\nimport Dynamic from './Dynamic';\nimport Blank from './Blank';\n\nconst layouts = {\n  Blank,\n  Dynamic,\n};\n\nexport default layouts;\n\n// types\n\nexport type LayoutType = keyof typeof layouts;\nexport type Layout = ComponentProps<typeof layouts[keyof typeof layouts]>;\nexport type Layouts = Layout[];\n","import React from 'react';\nimport { Components } from '../../ui-components';\nimport builder from '../builders/component-builder';\n\nconst Dynamic: React.FC<{\n  id: string;\n  layoutName: 'Dynamic';\n  components: Components;\n}> = ({ components }) => {\n  return <>{components.map((component, index) => builder(component, index))}</>;\n};\n\nexport default Dynamic;\n","import React from 'react';\nimport layouts, { Layout } from '../layouts';\n\nexport const buildLayout: React.FC<Layout> = (details) => {\n  const MyLayout = layouts[details.layoutName];\n  // using any to allow this to be dynamic\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return <MyLayout {...(details as any)} />;\n};\n\nexport default buildLayout;\n","import React from 'react';\n\nconst None: React.FC<{\n  wrap: 'None';\n}> = ({ children }) => {\n  return <>{children}</>;\n};\n\nexport default None;\n","import React from 'react';\nimport components from '../../ui-components';\n\nconst { Heading } = components;\n\nconst Box: React.FC<{\n  wrap: 'Box';\n  heading?: string;\n  horizontal?: boolean;\n}> = ({ children, heading, horizontal = true }) => {\n  return (\n    <div className=\"flex-grow flex flex-col bg-white text-black shadow-lg my-5\">\n      {heading && <Heading componentName=\"Heading\" text={heading} />}\n      <div className={`flex-grow flex ${horizontal ? 'flex-row' : 'flex-col'}`}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Box;\n","import { ComponentProps } from 'react';\n\nimport None from './none';\nimport Box from './box';\nimport Basic from './basic';\n\nconst wrappers = {\n  None,\n  Box,\n  Basic,\n};\n\nexport default wrappers;\n\n// types\n\nexport type WrapperType = keyof typeof wrappers;\nexport type Wrapper = ComponentProps<typeof wrappers[keyof typeof wrappers]>;\nexport type Wrappers = Wrapper[];\n","import React from 'react';\nimport { Fade } from 'react-awesome-reveal';\n\nconst Basic: React.FC<{\n  wrap: 'Basic';\n  header: string;\n  title: string;\n}> = ({ children, header, title }) => {\n  return (\n    <div className=\"px-2 lg:px-10 py-28 flex flex-col\">\n      <div className=\"flex flex-col justify-around uppercase max-w-3/5\">\n        <Fade\n          direction=\"left\"\n          className=\"text-xs pb-4 text-gray-400 tracking-5px\"\n        >\n          <div>\n            <span className=\"transition-all duration-500 ease-in-out hover:text-black hover:text-lg hover:font-bold\">\n              {header}\n            </span>\n          </div>\n        </Fade>\n        <Fade\n          direction=\"up\"\n          duration={1500}\n          className=\"text-xl font-bold tracking-5px\"\n        >\n          <div>\n            <span className=\"transition-all duration-500 ease-in-out hover:text-black hover:text-2xl hover:font-bold\">\n              {title}\n            </span>\n          </div>\n        </Fade>\n      </div>\n      <div className=\"mt-16\">{children}</div>\n    </div>\n  );\n};\n\nexport default Basic;\n","import React from 'react';\nimport wrappers, { Wrapper } from '../wrappers';\n\nexport function wrapLayout<T extends Wrapper>(details: T, layout: JSX.Element) {\n  const MyLayoutWrapper = wrappers[details.wrap];\n  // using any to allow this to be dynamic\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return <MyLayoutWrapper {...(details as any)}>{layout} </MyLayoutWrapper>;\n}\n\nexport default wrapLayout;\n","import React from 'react';\nimport { mapRoute } from '../../../utils/helpers';\nimport { Layout } from '../layouts';\nimport { Wrapper } from '../wrappers';\nimport { buildLayout } from './layout-builder';\nimport { wrapLayout } from './layout-wrapper';\n\ntype LayoutWithWrapper = Layout & Wrapper;\n\nexport const buildAndWrapLayout: React.FC<LayoutWithWrapper> = (details) => {\n  const layout = buildLayout(details);\n\n  if (!layout) {\n    throw new Error('No layout built');\n  }\n\n  const wrapper = wrapLayout(details, layout);\n\n  return (\n    <div key={details.id} id={mapRoute(details.id)} className=\"\">\n      {wrapper}\n    </div>\n  );\n};\n\nexport default buildAndWrapLayout;\n","import { Layout } from '../components/app/layouts';\nimport { Wrapper } from '../components/app/wrappers';\n\ntype LayoutWithWrapper = Layout & Wrapper;\n\nexport interface SiteConfig {\n  sections: LayoutWithWrapper[];\n}\n\nconst site: SiteConfig = {\n  sections: [\n    {\n      id: 'header',\n      layoutName: 'Dynamic',\n\n      wrap: 'Box',\n      heading: 'Amazon Transcribe Demo!',\n\n      components: [],\n    },\n\n    {\n      id: 'config-manager',\n      layoutName: 'Dynamic',\n\n      wrap: 'Box',\n      horizontal: true,\n\n      components: [\n        {\n          componentName: 'DynamicTranscribeForm',\n          fields: ['Access Key', 'Secret Access Key'],\n        },\n        {\n          componentName: 'DynamicTranscribeForm',\n          fields: ['language', 'region'],\n        },\n      ],\n    },\n\n    {\n      id: 'streaming',\n      layoutName: 'Dynamic',\n\n      wrap: 'Box',\n      heading: 'Streaming',\n\n      components: [{ componentName: 'StreamingView' }],\n    },\n  ],\n};\n\nexport default site;\n","import * as React from 'react';\nimport siteConfig from '../constants/site.constants';\n\nexport const SiteConfigContext = React.createContext(siteConfig);\n\nconst SiteConfigProvider: React.FC = ({ children }) => (\n  <SiteConfigContext.Provider value={siteConfig}>\n    {children}\n  </SiteConfigContext.Provider>\n);\n\nexport default SiteConfigProvider;\n","import * as React from 'react';\n\nimport { SiteConfigContext } from '../store/site-config';\n\nconst useSiteConfig = () => {\n  return React.useContext(SiteConfigContext);\n};\n\nexport default useSiteConfig;\n","import React from 'react';\nimport TranscribeConfigProvider from './transcribe-config';\nimport SiteConfigProvider from './site-config';\n\nexport const StoreProviders: React.FC = (props) => {\n  const { children } = props;\n  return (\n    <SiteConfigProvider>\n      <TranscribeConfigProvider>{children}</TranscribeConfigProvider>\n    </SiteConfigProvider>\n  );\n};\n\nexport default StoreProviders;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport buildAndWrapLayout from './components/app/builders';\nimport useSiteConfig from './hooks/use-site-config';\nimport StoreProviders from './store';\n\nconst Main: React.FC = () => {\n  const siteConfig = useSiteConfig();\n\n  const sections = siteConfig.sections.map(buildAndWrapLayout);\n\n  return <div className=\"flex-grow m-10\">{sections}</div>;\n};\n\nfunction App() {\n  return (\n    <div className=\"flex mx-auto min-w-0 h-screen\">\n      <StoreProviders>\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <Main />\n            </Route>\n          </Switch>\n        </Router>\n      </StoreProviders>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './assets/styles/main.css';\n\nimport App from './App';\nimport reportWebVitals from './utils/reportWebVitals';\nimport logger from './utils/logger';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(logger.info.bind(logger));\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport MicrophoneStream from 'microphone-stream';\n\nexport function encodePcm(chunk: any) {\n  const input = MicrophoneStream.toRaw(chunk);\n\n  let offset = 0;\n  const buffer = new ArrayBuffer(input.length * 2);\n  const view = new DataView(buffer);\n  for (let i = 0; i < input.length; i++, offset += 2) {\n    const s = Math.max(-1, Math.min(1, input[i]));\n    view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n\n  return Buffer.from(buffer);\n}\n"],"sourceRoot":""}